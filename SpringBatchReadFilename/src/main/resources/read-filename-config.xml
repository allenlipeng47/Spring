<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:batch="http://www.springframework.org/schema/batch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/batch
		http://www.springframework.org/schema/batch/spring-batch-2.2.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd">

    <bean id="transactionManager" class="org.springframework.batch.support.transaction.ResourcelessTransactionManager" />

    <bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
        <property name="transactionManager" ref="transactionManager" />
    </bean>

    <bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
        <property name="jobRepository" ref="jobRepository" />
    </bean>

    <!-- ========================================================================================================= -->
    <!-- ========================================================================================================= -->
    <!-- ========================================================================================================= -->
    <!-- CSV import to risk_dm.bp_attributes_dealerapps  ========================================================= -->
    <batch:job id="filenameJob">
        <batch:step id="filenameStep">
            <batch:tasklet>
                <batch:chunk reader="filenameReader" writer="filenameWriter" commit-interval="100"/>
            </batch:tasklet>
        </batch:step>
    </batch:job>

    <bean id="filenameReader" class=" org.springframework.batch.item.file.MultiResourceItemReader">
        <property name="resources" value="file:SpringBatchReadFilename/tmp/*.csv" />
        <property name="delegate" ref="filenameFlatReader" />
    </bean>

    <bean id="filenameFlatReader" class="com.pli.test.filename.reader.FilenameItemReader">
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer">
                    <bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
                        <property name="names" value="ID,VALUE" />
                        <property name="delimiter" value="," />
                        <property name="quoteCharacter" value="&quot;" />
                        <property name="strict" value="false" />
                    </bean>
                </property>
                <property name="fieldSetMapper">
                    <bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper" >
                        <property name="prototypeBeanName" value="filenameInfo" />
                    </bean>
                </property>
            </bean>
        </property>
        <property name="linesToSkip" value="1" />
    </bean>

    <!--Need to define as prototype. In this way, every time get bean will return a new object, but not singleton -->
    <bean id="filenameInfo" class="com.pli.test.filename.entity.FilenameEntity" scope="prototype"/>

    <bean id="filenameWriter" class="com.pli.test.filename.writer.FilenameWriter" />

</beans>